"use strict";(self.webpackChunkyerbas_docs=self.webpackChunkyerbas_docs||[]).push([[4896],{5419:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var n=a(7462),r=(a(7294),a(3905)),s=a(2004);const i={sidebar_position:6},o="getrawtransaction",l={unversionedId:"wallet/cli-wallet/commands/raw-transactions/getrawtransaction",id:"wallet/cli-wallet/commands/raw-transactions/getrawtransaction",title:"getrawtransaction",description:'getrawtransaction "txid" ( verbose )',source:"@site/docs/wallet/cli-wallet/commands/raw-transactions/getrawtransaction.mdx",sourceDirName:"wallet/cli-wallet/commands/raw-transactions",slug:"/wallet/cli-wallet/commands/raw-transactions/getrawtransaction",permalink:"/docs/wallet/cli-wallet/commands/raw-transactions/getrawtransaction",draft:!1,editUrl:"https://github.com/The-Yerbas-Endeavor/docs/tree/develop/docs/wallet/cli-wallet/commands/raw-transactions/getrawtransaction.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"sidebarWallet",previous:{title:"fundrawtransaction",permalink:"/docs/wallet/cli-wallet/commands/raw-transactions/fundrawtransaction"},next:{title:"sendrawtransaction",permalink:"/docs/wallet/cli-wallet/commands/raw-transactions/sendrawtransaction"}},c={},d=[{value:"Arguments",id:"arguments",level:2},{value:"Output",id:"output",level:2},{value:"Examples",id:"examples",level:2}],u={toc:d};function m(t){let{components:e,...i}=t;return(0,r.kt)("wrapper",(0,n.Z)({},u,i,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getrawtransaction"},"getrawtransaction"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},'getrawtransaction "txid" ( verbose )')),(0,r.kt)("p",null,"NOTE: By default this function only works for mempool transactions. If the -txindex option is\nenabled, it also works for blockchain transactions.\nDEPRECATED: for now, it also works for transactions with unspent outputs."),(0,r.kt)("p",null,"Return the raw transaction data."),(0,r.kt)("p",null,"If verbose is 'true', returns an Object with information about 'txid'.\nIf verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'yerbas-cli getrawtransaction "mytxid"\nyerbas-cli getrawtransaction "mytxid" true\n')),(0,r.kt)(s.Z,{playing:!0,controls:!0,url:[{src:`${a(6854).Z}`,type:"video/webm"}],mdxType:"ReactPlayer"}),(0,r.kt)("sub",null,"Video Guide - credit @rocket"),(0,r.kt)(s.Z,{playing:!0,controls:!0,url:"https://www.youtube.com/watch?v=Yd---pu4oTg",muted:!0,playing:!1,mdxType:"ReactPlayer"}),(0,r.kt)("h2",{id:"arguments"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},'"txid"'),(0,r.kt)("td",{parentName:"tr",align:null},"(string)"),(0,r.kt)("td",{parentName:"tr",align:null},"The transaction id")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'Arguments:\n1. "txid"      (string, required) The transaction id\n2. verbose       (bool, optional, default=false) If false, return a string, otherwise return a json object\n')),(0,r.kt)("h2",{id:"output"},"Output"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Result"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},'"data"'),(0,r.kt)("td",{parentName:"tr",align:null},"(string)"),(0,r.kt)("td",{parentName:"tr",align:null},"The serialized, hex-encoded data for 'txid'")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'Result (if verbose is not set or set to false):\n"data"      (string) The serialized, hex-encoded data for \'txid\'\n\nResult (if verbose is set to true):\n{\n  "txid" : "id",        (string) The transaction id (same as provided)\n  "size" : n,             (numeric) The transaction size\n  "version" : n,          (numeric) The version\n  "locktime" : ttt,       (numeric) The lock time\n  "vin" : [               (array of json objects)\n     {\n       "txid": "id",    (string) The transaction id\n       "vout": n,         (numeric)\n       "scriptSig": {     (json object) The script\n         "asm": "asm",  (string) asm\n         "hex": "hex"   (string) hex\n       },\n       "sequence": n      (numeric) The script sequence number\n     }\n     ,...\n  ],\n  "vout" : [              (array of json objects)\n     {\n       "value" : x.xxx,            (numeric) The value in YERB\n       "n" : n,                    (numeric) index\n       "scriptPubKey" : {          (json object)\n         "asm" : "asm",          (string) the asm\n         "hex" : "hex",          (string) the hex\n         "reqSigs" : n,            (numeric) The required sigs\n         "type" : "pubkeyhash",  (string) The type, eg \'pubkeyhash\'\n         "addresses" : [           (json array of string)\n           "address"        (string) yerbas address\n           ,...\n         ]\n       }\n     }\n     ,...\n  ],\n  "extraPayloadSize" : n    (numeric) Size of DIP2 extra payload. Only present if it\'s a special TX\n  "extraPayload" : "hex"    (string) Hex encoded DIP2 extra payload data. Only present if it\'s a special TX\n  "hex" : "data",         (string) The serialized, hex-encoded data for \'txid\'\n  "blockhash" : "hash",   (string) the block hash\n  "height" : n,             (numeric) The block height\n  "confirmations" : n,      (numeric) The confirmations\n  "time" : ttt,             (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)\n  "blocktime" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n  "instantlock" : true|false, (bool) Current transaction lock state\n  "instantlock_internal" : true|false, (bool) Current internal transaction lock state\n  "chainlock" : true|false, (bool) The state of the corresponding block chainlock\n}\n')),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getrawtransaction", "params": ["mytxid", true] }\' -H \'content-type: text/plain;\' http://127.0.0.1:9998/\n')))}m.isMDXComponent=!0},6854:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/medias/sendrawtransaction-8d67b88b5eeb92056b969776db29ca7e.webm"}}]);