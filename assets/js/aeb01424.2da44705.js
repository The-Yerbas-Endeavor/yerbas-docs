"use strict";(self.webpackChunkyerbas_docs=self.webpackChunkyerbas_docs||[]).push([[7536],{8027:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>u,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=a(7462),l=(a(7294),a(3905)),r=a(2004);const o={sidebar_position:19},s="gettxout",i={unversionedId:"wallet/cli-wallet/commands/blockchain/gettxout",id:"wallet/cli-wallet/commands/blockchain/gettxout",title:"gettxout",description:'gettxout "txid" n ( includemempool )_',source:"@site/docs/wallet/cli-wallet/commands/blockchain/gettxout.mdx",sourceDirName:"wallet/cli-wallet/commands/blockchain",slug:"/wallet/cli-wallet/commands/blockchain/gettxout",permalink:"/docs/wallet/cli-wallet/commands/blockchain/gettxout",draft:!1,editUrl:"https://github.com/The-Yerbas-Endeavor/yerbas-docs/tree/develop/docs/wallet/cli-wallet/commands/blockchain/gettxout.mdx",tags:[],version:"current",sidebarPosition:19,frontMatter:{sidebar_position:19},sidebar:"sidebarWallet",previous:{title:"getspecialtxes",permalink:"/docs/wallet/cli-wallet/commands/blockchain/getspecialtxes"},next:{title:"gettxoutproof",permalink:"/docs/wallet/cli-wallet/commands/blockchain/gettxoutproof"}},u={},p=[{value:"Arguments",id:"arguments",level:2},{value:"Output",id:"output",level:2},{value:"Examples",id:"examples",level:2}],m={toc:p};function c(t){let{components:e,...o}=t;return(0,l.kt)("wrapper",(0,n.Z)({},m,o,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"gettxout"},"gettxout"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},'gettxout "txid" n ( include_mempool )')),(0,l.kt)("p",null,"Returns details about an unspent transaction output."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# Get unspent transactions\nyerbas-cli listunspent\n\n# View the details\nyerbas-cli gettxout "txid" 1\n')),(0,l.kt)(r.Z,{playing:!0,controls:!0,url:[{src:`${a(5799).Z}`,type:"video/webm"}],mdxType:"ReactPlayer"}),(0,l.kt)("h2",{id:"arguments"},"Arguments"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},'"txid"'),(0,l.kt)("td",{parentName:"tr",align:null},"(string)"),(0,l.kt)("td",{parentName:"tr",align:null},"The transaction id")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},'"n"'),(0,l.kt)("td",{parentName:"tr",align:null},"(numeric)"),(0,l.kt)("td",{parentName:"tr",align:null},"vout number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},'"include_mempool"'),(0,l.kt)("td",{parentName:"tr",align:null},"(boolean)"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether to include the mempool. Default: true. Note that an unspent output that is spent in the mempool won't appear.")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'Arguments:\n1. "txid"             (string, required) The transaction id\n2. "n"                (numeric, required) vout number\n3. "include_mempool"  (boolean, optional) Whether to include the mempool. Default: true.     Note that an unspent output that is spent in the mempool won\'t appear.\n')),(0,l.kt)("h2",{id:"output"},"Output"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Result"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},'"bestblock"'),(0,l.kt)("td",{parentName:"tr",align:null},"(string)"),(0,l.kt)("td",{parentName:"tr",align:null},"the block hash")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'Result:\n{\n  "bestblock" : "hash",    (string) the block hash\n  "confirmations" : n,       (numeric) The number of confirmations\n  "value" : x.xxx,           (numeric) The transaction value in YERB\n  "scriptPubKey" : {         (json object)\n     "asm" : "code",       (string)\n     "hex" : "hex",        (string)\n     "reqSigs" : n,          (numeric) Number of required signatures\n     "type" : "pubkeyhash", (string) The type, eg pubkeyhash\n     "addresses" : [          (array of string) array of yerbas addresses\n        "address"     (string) yerbas address\n        ,...\n     ]\n  },\n  "coinbase" : true|false   (boolean) Coinbase or not\n}\n')),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "gettxout", "params": ["txid", 1] }\' -H \'content-type: text/plain;\' http://127.0.0.1:9998/\n')))}c.isMDXComponent=!0},5799:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/medias/gettxout-7a3cc1ca4b474205b5668753416fee1f.webm"}}]);