"use strict";(self.webpackChunkyerbas_docs=self.webpackChunkyerbas_docs||[]).push([[6326],{7147:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=n(7462),s=(n(7294),n(3905)),o=n(2004);const r={sidebar_position:36},i="listtransactions",l={unversionedId:"wallet/cli-wallet/commands/wallet/listtransactions",id:"wallet/cli-wallet/commands/wallet/listtransactions",title:"listtransactions",description:'listtransactions ( "account" count skip includewatchonly)_',source:"@site/docs/wallet/cli-wallet/commands/wallet/listtransactions.mdx",sourceDirName:"wallet/cli-wallet/commands/wallet",slug:"/wallet/cli-wallet/commands/wallet/listtransactions",permalink:"/docs/wallet/cli-wallet/commands/wallet/listtransactions",draft:!1,editUrl:"https://github.com/Raptor3um/docs/tree/develop/docs/wallet/cli-wallet/commands/wallet/listtransactions.mdx",tags:[],version:"current",sidebarPosition:36,frontMatter:{sidebar_position:36},sidebar:"sidebarWallet",previous:{title:"listsinceblock",permalink:"/docs/wallet/cli-wallet/commands/wallet/listsinceblock"},next:{title:"listwallets",permalink:"/docs/wallet/cli-wallet/commands/wallet/listwallets"}},c={},d=[{value:"Arguments",id:"arguments",level:2},{value:"Output",id:"output",level:2},{value:"Examples",id:"examples",level:2}],u={toc:d};function m(t){let{components:e,...r}=t;return(0,s.kt)("wrapper",(0,a.Z)({},u,r,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"listtransactions"},"listtransactions"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},'listtransactions ( "account" count skip include_watchonly)')),(0,s.kt)("p",null,"Returns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'# List the most recent 10 transactions in the systems\nyerbas-cli listtransactions\n\n# List transactions 100 to 120\nyerbas-cli listtransactions "*" 20 100\n')),(0,s.kt)(o.Z,{playing:!0,controls:!0,url:[{src:`${n(1790).Z}`,type:"video/webm"}],mdxType:"ReactPlayer"}),(0,s.kt)("h2",{id:"arguments"},"Arguments"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Argument"),(0,s.kt)("th",{parentName:"tr",align:null},"Type"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},'"account"'),(0,s.kt)("td",{parentName:"tr",align:null},"(string)"),(0,s.kt)("td",{parentName:"tr",align:null},'DEPRECATED. The account name. Should be "',"*",'".')),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"count"),(0,s.kt)("td",{parentName:"tr",align:null},"(numeric)"),(0,s.kt)("td",{parentName:"tr",align:null},"The number of transactions to return")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"skip"),(0,s.kt)("td",{parentName:"tr",align:null},"(numeric)"),(0,s.kt)("td",{parentName:"tr",align:null},"The number of transactions to skip")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"include_watchonly"),(0,s.kt)("td",{parentName:"tr",align:null},"(bool)"),(0,s.kt)("td",{parentName:"tr",align:null},"Include balances in watch-only addresses (see 'importaddress')")))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'Arguments:\n1. "account"        (string, optional) DEPRECATED. The account name. Should be "*".\n2. count            (numeric, optional, default=10) The number of transactions to return\n3. skip           (numeric, optional, default=0) The number of transactions to skip\n4. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see \'importaddress\')\n')),(0,s.kt)("h2",{id:"output"},"Output"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Result"),(0,s.kt)("th",{parentName:"tr",align:null},"Type"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},'"account"'),(0,s.kt)("td",{parentName:"tr",align:null},"(string)"),(0,s.kt)("td",{parentName:"tr",align:null},'DEPRECATED. The account name associated with the transaction. It will be "" for the default account.')))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'Result:\n[\n  {\n    "account":"accountname",  (string) DEPRECATED. The account name associated with the transaction.\n                                                It will be "" for the default account.\n    "address":"address",    (string) The yerbas address of the transaction. Not present for\n                                                move transactions (category = move).\n    "category":"send|receive|move", (string) The transaction category. \'move\' is a local (off blockchain)\n                                                transaction between accounts, and not associated with an address,\n                                                transaction id or block. \'send\' and \'receive\' transactions are\n                                                associated with an address, transaction id and block details\n    "amount": x.xxx,          (numeric) The amount in YERB. This is negative for the \'send\' category, and for the\n                                         \'move\' category for moves outbound. It is positive for the \'receive\' category,\n                                         and for the \'move\' category for inbound funds.\n    "label": "label",       (string) A comment for the address/transaction, if any\n    "vout": n,                (numeric) the vout value\n    "fee": x.xxx,             (numeric) The amount of the fee in YERB. This is negative and only available for the\n                                         \'send\' category of transactions.\n    "confirmations": n,       (numeric) The number of blockchain confirmations for the transaction. Available for \'send\' and\n                                         \'receive\' category of transactions. Negative confirmations indicate the\n                                         transation conflicts with the block chain\n    "instantlock" : true|false, (bool) Current transaction lock state. Available for \'send\' and \'receive\' category of transactions.\n    "instantlock_internal" : true|false, (bool) Current internal transaction lock state. Available for \'send\' and \'receive\' category of transactions.\n    "chainlock" : true|false, (bool) The state of the corresponding block chainlock\n    "trusted": xxx,           (bool) Whether we consider the outputs of this unconfirmed transaction safe to spend.\n    "blockhash": "hashvalue", (string) The block hash containing the transaction. Available for \'send\' and \'receive\'\n                                          category of transactions.\n    "blockindex": n,          (numeric) The index of the transaction in the block that includes it. Available for \'send\' and \'receive\'\n                                          category of transactions.\n    "blocktime": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).\n    "txid": "transactionid",  (string) The transaction id. Available for \'send\' and \'receive\' category of transactions.\n    "time": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).\n    "timereceived": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available\n                                          for \'send\' and \'receive\' category of transactions.\n    "comment": "...",         (string) If a comment is associated with the transaction.\n    "otheraccount": "accountname",  (string) DEPRECATED. For the \'move\' category of transactions, the account the funds came\n                                          from (for receiving funds, positive amounts), or went to (for sending funds,\n                                          negative amounts).\n    "abandoned": xxx          (bool) \'true\' if the transaction has been abandoned (inputs are respendable). Only available for the\n                                         \'send\' category of transactions.\n  }\n]\n')),(0,s.kt)("h2",{id:"examples"},"Examples"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "listtransactions", "params": ["*", 20, 100] }\' -H \'content-type: text/plain;\' http://127.0.0.1:9998/\n')))}m.isMDXComponent=!0},1790:(t,e,n)=>{n.d(e,{Z:()=>a});const a=n.p+"assets/medias/listtransactions-4cdf9b6796ff52f3f93edb7915f89aaa.webm"}}]);