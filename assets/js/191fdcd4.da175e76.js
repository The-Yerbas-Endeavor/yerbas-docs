"use strict";(self.webpackChunkyerbas_docs=self.webpackChunkyerbas_docs||[]).push([[5382],{399:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var i=n(7462),a=(n(7294),n(3905)),o=n(2004);const s={sidebar_position:4},r="getblockchaininfo",l={unversionedId:"wallet/cli-wallet/commands/blockchain/getblockchaininfo",id:"wallet/cli-wallet/commands/blockchain/getblockchaininfo",title:"getblockchaininfo",description:"Returns the txids for an address(es) (requires addressindex to be enabled).",source:"@site/docs/wallet/cli-wallet/commands/blockchain/getblockchaininfo.mdx",sourceDirName:"wallet/cli-wallet/commands/blockchain",slug:"/wallet/cli-wallet/commands/blockchain/getblockchaininfo",permalink:"/docs/wallet/cli-wallet/commands/blockchain/getblockchaininfo",draft:!1,editUrl:"https://github.com/Raptor3um/docs/tree/develop/docs/wallet/cli-wallet/commands/blockchain/getblockchaininfo.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"sidebarWallet",previous:{title:"getblock",permalink:"/docs/wallet/cli-wallet/commands/blockchain/getblock"},next:{title:"getblockcount",permalink:"/docs/wallet/cli-wallet/commands/blockchain/getblockcount"}},c={},d=[{value:"Output",id:"output",level:2},{value:"Examples",id:"examples",level:2}],h={toc:d};function u(e){let{components:t,...s}=e;return(0,a.kt)("wrapper",(0,i.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getblockchaininfo"},"getblockchaininfo"),(0,a.kt)("p",null,"Returns the txids for an address(es) (requires addressindex to be enabled)."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"yerbas-cli getblockchaininfo ")),(0,a.kt)(o.Z,{playing:!0,controls:!0,url:[{src:`${n(3105).Z}`,type:"video/webm"}],mdxType:"ReactPlayer"}),(0,a.kt)("h2",{id:"output"},"Output"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Result"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},'"chain"'),(0,a.kt)("td",{parentName:"tr",align:null},"(string)"),(0,a.kt)("td",{parentName:"tr",align:null},"current network name as defined in BIP70 (main, test, regtest)")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'Result:\n{\n  "chain": "xxxx",        (string) current network name as defined in BIP70 (main, test, regtest)\n  "blocks": xxxxxx,         (numeric) the current number of blocks processed in the server\n  "headers": xxxxxx,        (numeric) the current number of headers we have validated\n  "bestblockhash": "...", (string) the hash of the currently best block\n  "difficulty": xxxxxx,     (numeric) the current difficulty\n  "mediantime": xxxxxx,     (numeric) median time for the current best block\n  "verificationprogress": xxxx, (numeric) estimate of verification progress [0..1]\n  "chainwork": "xxxx"     (string) total amount of work in active chain, in hexadecimal\n  "pruned": xx,             (boolean) if the blocks are subject to pruning\n  "pruneheight": xxxxxx,    (numeric) lowest-height complete block stored\n  "softforks": [            (array) status of softforks in progress\n     {\n        "id": "xxxx",        (string) name of softfork\n        "version": xx,         (numeric) block version\n        "reject": {            (object) progress toward rejecting pre-softfork blocks\n           "status": xx,       (boolean) true if threshold reached\n        },\n     }, ...\n  ],\n  "bip9_softforks": {          (object) status of BIP9 softforks in progress\n     "xxxx" : {                (string) name of the softfork\n        "status": "xxxx",    (string) one of "defined", "started", "locked_in", "active", "failed"\n        "bit": xx,             (numeric) the bit (0-28) in the block version field used to signal this softfork (only for "started" status)\n        "startTime": xx,       (numeric) the minimum median time past of a block at which the bit gains its meaning\n        "timeout": xx,         (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\n        "since": xx,           (numeric) height of the first block to which the status applies\n        "statistics": {        (object) numeric statistics about BIP9 signalling for a softfork (only for "started" status)\n           "period": xx,       (numeric) the length in blocks of the BIP9 signalling period\n           "threshold": xx,    (numeric) the number of blocks with the version bit set required to activate the feature\n           "elapsed": xx,      (numeric) the number of blocks elapsed since the beginning of the current period\n           "count": xx,        (numeric) the number of blocks with the version bit set in the current period\n           "possible": xx      (boolean) returns false if there are not enough blocks left in this period to pass activation threshold\n        }\n     }\n  }\n}\n')),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getblockchaininfo", "params": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:9998/\n')))}u.isMDXComponent=!0},3105:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/medias/getblockchaininfo-29d695d84f082e661abaf19c41c276bc.webm"}}]);